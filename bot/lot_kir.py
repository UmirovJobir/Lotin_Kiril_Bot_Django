from backend import Analiz

data = Analiz()

class translate:
    def __init__(self):
        self.kril = ["–ê", "–∞", "–ë", "–±", "–í", "–≤", "–ì", "–≥", "–î", "–¥", "–ï", "–µ", "–Å", "—ë", "–ñ", "–∂",
                "–ó", "–∑", "–ò", "–∏", "–ô", "–π", "–ö", "–∫", "–õ", "–ª", "–ú", "–º", "–ù", "–Ω", "–û", "–æ",
                "–ü", "–ø", "–†", "—Ä", "–°", "—Å", "–¢", "—Ç", "–£", "—É", "–§", "—Ñ", "–•", "—Ö", "–¶", "—Ü",
                "–ß", "—á", "–®", "—à", "–≠", "—ç", "–Æ", "—é", "–Ø", "—è", "–é", "—û",
                "“ö", "“õ", "“í", "“ì", "“≤", "“≥", "—ä", "—å",
                " ", '"', "#", "$", "%", "&", "(", ")", "*", "+", ",", "-", ".", "/",":", ";", "<", "=", ">", "?", "@", "[", "]", "^", "_",
                "`", "‚ùá", "üì±", "üåê", "‚úÖ", "!", "‚Äì"]

        self.lotin = ["A", "a", "B", "b", "V", "v", "G", "g", "D", "d", "Ye", "ye", "Yo", "yo", "J", "j",
                "Z", "z", "I", "i", "Y", "y", "K", "k", "L", "l", "M", "m", "N", "n", "O", "o",
                "P", "p", "R", "r", "S", "s", "T", "t", "U", "u", "F", "f", "X", "x", "S", "s",
                "Ch", "ch", "Sh", "sh",  "E", "e", "Yu", "yu", "Ya", "ya", "O‚Äò", "o‚Äò",
                "Q", "q", "G‚Äò", "g‚Äò", "H", "h", "‚Äô", "",
                " ", '"', "#", "$", "%", "&", "(", ")", "*", "+", ",", "-", ".", "/",":", ";", "<", "=", ">", "?", "@", "[", "]", "^", "_",
                "`", "‚ùá", "üì±", "üåê", "‚úÖ", "!", "‚Äì"]

        self.digit = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

    def lotin_to_kril(self, text= 'Matin kiriting..'):

        dic_text = data.replay_dictionary_words()
        for i in dic_text:
            text = text.replace(f'{i[0]}',f'{i[1]}')

        text = text.replace('ksiya', '–∫—Ü–∏—è').replace('KSIYA', '–ö–¶–ò–Ø')
        text = text.replace('tsiya', '—Ü–∏—è').replace('TSIYA', '–¶–ò–Ø')
        text = text.replace('ksion', '–∫—Ü–∏–æ–Ω').replace('KSION', '–ö–¶–ò–û–ù')
        text = text.replace('tsion', '—Ü–∏–æ–Ω').replace('TSION', '–¶–ò–û–ù')
        text = text.replace('bsiya', '–±—Ü–∏—è').replace('BSIYA', '–ë–¶–ò–Ø')
        text = text.replace('sion', '—Ü–∏–æ–Ω').replace('SION', '–¶–ò–û–ù')
        text = text.replace('siya', '—Ü–∏—è').replace('SIYA', '–¶–ò–Ø')

        text = text.replace('tsey', '—Ü–µ–π').replace('TSEY', '–¶–ï–ô')

        text = text.replace('fakultet', '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç').replace('Fakultet', '–§–∞–∫—É–ª—å—Ç–µ—Ç').replace('FAKULTET', '–§–ê–ö–£–õ–¨–¢–ï–¢')
        text = text.replace('neft','–Ω–µ—Ñ—Ç—å').replace('Neft','–ù–µ—Ñ—Ç—å').replace('NEFT','–ù–ï–§–¢–¨')
        text = text.replace('reket', '—Ä—ç–∫–µ—Ç')

        text = text.replace("Yo'", "–ô—û").replace("yo'", '–π—û').replace("Yo‚Äò", "–ô—û").replace("yo‚Äò", '–π—û').replace("yo ª",'–π—û').replace("Yo ª", "–ô—û").replace("yo`",'–π—û').replace("Yo`", "–ô—û").replace("Yo‚Äô", "–ô—û").replace("yo‚Äô", '–π—û')
        text = text.replace("YO'", "–ô—û").replace("YO‚Äò", "–ô—û").replace("YO ª", "–ô—û").replace("YO`", "–ô—û").replace("YO‚Äô", "–ô—û")
        text = text.replace("Ye", "–ï").replace("ye", "–µ").replace("Yo", "–Å").replace("yo", "—ë").replace("Ch","–ß").replace("ch", "—á").replace("Sh", "–®").replace("sh", "—à").replace("Yu", "–Æ").replace("yu", "—é").replace("Ya","–Ø").replace("ya", "—è").replace("O‚Äò", "–é").replace("o‚Äò", "—û").replace("G‚Äò", "“í").replace("g‚Äò", "“ì")
        text = text.replace("YE", "–ï").replace("YO", "–Å").replace("CH","–ß").replace("SH", "–®").replace("YU", "–Æ").replace("YA","–Ø")
        text = text.replace("o ª", '—û').replace("O ª", "–é").replace("g ª", "“ì").replace("G ª", "“í").replace("–û‚Äò", "–é").replace("o‚Äò", '—û').replace("–û`", "–é").replace("o`", '—û').replace("–û‚Äô", "–é").replace("o‚Äô", '—û').replace("O‚Äô", "–é").replace("o º", "—û").replace("O º", "–é")
        text = text.replace("O'", "–é").replace("o'", "—û").replace("G'", "“í").replace("g'", "“ì").replace("G`", "“í").replace("g`", "“ì").replace("G‚Äô", "“í").replace("g‚Äô", "“ì").replace("g º", "“ì").replace("G º", "“í")
        text = text.replace("'", "—ä").replace("`", "—ä")

        t = []
        for i in text:
            t.append(i)
        #print(t)
        n = ''
        for j, i in enumerate(t):
            for index, (l, k) in enumerate(zip(self.lotin, self.kril)):
                if i not in self.lotin:
                    n = f"{n}{i}"
                    break
                if i == '\n':
                    n = f"{n}{i}"
                    break
                if (i == 'e' and i == l) or (i == 'E' and i == l):
                    if (text[j - 1] == ' ') or (j - 1 < 0) or (text[j-1] == '\n') or ((text[j-1] not in self.kril[:68]) and (text[j-1] not in self.lotin[:66])):
                        n = f"{n}{k}"
                        break
                    else:
                        n = f"{n}{i}"
                        break
                if i == l:
                    n = f"{n}{self.kril[index]}"
                    break
                elif i == k:
                    n = f"{n}{k}"
                    break
        #print(n)
        return n

    def kril_to_lotin(self, text= 'Matin kiriting..'):

        dic_text = data.replay_dictionary_words()
        for i in dic_text:
            text = text.replace(f'{i[0]}', f'{i[1]}')

        text = text.replace('–∫—Ü–∏—è','ksiya').replace('–ö–¶–ò–Ø', 'KSIYA')
        text = text.replace('—Ü–∏—è','tsiya').replace('–¶–ò–Ø', 'TSIYA')
        text = text.replace('–∫—Ü–∏–æ–Ω','ksion').replace('–ö–¶–ò–û–ù','KSION')
        text = text.replace('—Ü–∏–æ–Ω', 'tsion').replace('–¶–ò–û–ù','TSION')

        text = text.replace('—Ü–µ–π', 'tsey').replace('–¶–ï–ô','TSEY')

        text = text.replace('—Ñ–∞–∫—É–ª—å—Ç–µ—Ç', 'fakultet').replace('–§–∞–∫—É–ª—å—Ç–µ—Ç','Fakultet').replace('–§–ê–ö–£–õ–¨–¢–ï–¢', 'FAKULTET')
        text = text.replace('–Ω–µ—Ñ—Ç—å', 'neft').replace('–ù–µ—Ñ—Ç—å', 'Neft').replace('–ù–ï–§–¢–¨', 'NEFT')

        # text = text.replace("–ô—û", "Yo'").replace('–π—û',"yo'").replace("–ô—û", "Yo‚Äò").replace('–π—û', "yo‚Äò").replace('–π—û', "yo ª").replace("–ô—û", "Yo ª").replace('–π—û', "yo`").replace("–ô—û","Yo`").replace("–ô—û","Yo‚Äô").replace('–π—û',"yo‚Äô")
        # text = text.replace("–ô—û", "YO'").replace("–ô—û", "YO‚Äò").replace("–ô—û","YO ª").replace("–ô—û", "YO`").replace("–ô—û", "YO‚Äô")
        # text = text.replace("–ï", "Ye").replace("–µ", "ye").replace("–Å", "Yo").replace("—ë", "yo").replace("–ß", "Ch").replace("—á", "ch").replace("–®", "Sh").replace("—à", "sh").replace("–Æ", "Yu").replace("—é", "yu").replace("–Ø","Ya").replace("—è", "ya").replace("–é", "O‚Äò").replace("—û", "o‚Äò").replace("“í", "G‚Äò").replace("“ì", "g‚Äò")
        # text = text.replace("–ï", "YE").replace("–Å", "YO").replace("–ß", "CH").replace("–®", "SH").replace("–Æ", "YU").replace("–Ø", "YA")
        # text = text.replace('—û',"o ª").replace("–é", "O ª").replace("g ª", "“ì").replace("G ª", "“í").replace("–û‚Äò", "–é").replace("o‚Äò", '—û').replace("–û`", "–é").replace("o`", '—û').replace("–û‚Äô", "–é").replace("o‚Äô", '—û').replace("O‚Äô", "–é").replace("o º", "—û").replace("O º", "–é")
        # text = text.replace('—û', "o ª").replace("–é", "O ª").replace("g ª", "“ì").replace("G ª", "“í")
        # text = text.replace("O'", "–é").replace("o'", "—û").replace("G'", "“í").replace("g'", "“ì").replace("G`", "“í").replace("g`", "“ì").replace("G‚Äô", "“í").replace("g‚Äô", "“ì").replace("g º", "“ì").replace("G º", "“í")
        # text = text.replace("'", "—ä").replace("`", "—ä")

        t = []
        for i in text:
            t.append(i)
        #print(t)
        n = ''
        for j, i in enumerate(t):
            for index, (l, k) in enumerate(zip(self.lotin, self.kril)):
                if i not in self.kril:
                    n = f"{n}{i}"
                    break
                if i == '\n':
                    n = f"{n}{i}"
                    break
                if i == k:
                    if ((i == '–µ' and i == k) or (i == '–ï' and i == k)) and (text[j - 1] != ' ') and (text[j - 1] != '\n') and (j-1 > 0):
                        n = f"{n}{i}"
                        break
                    else:
                        n = f"{n}{self.lotin[index]}"
                        break
                # if (i == 'e' and i == l) or (i == 'E' and i == k):
                #     if (text[j - 1] == ' ') or (j - 1 < 0) or (text[j-1] == '\n') or ((text[j-1] not in self.kril[:68]) and (text[j-1] not in self.lotin[:66])):
                #         n = f"{n}{l}"
                #         break
                #     else:
                #         n = f"{n}{i}"
                #         break

                elif i == l:
                    n = f"{n}{l}"
                    break
        #print(n)
        return n

